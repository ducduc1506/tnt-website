const { Category, Product } = require("../models");

class CategoryService {
  // üîπ GET ALL CATEGORIES (bao g·ªìm danh m·ª•c con)
  static async getAll() {
    try {
      return await Category.findAll({
        include: [
          {
            model: Category,
            as: "subcategories",
            include: [
              {
                model: Product,
                as: "products",
                attributes: ["id"], // ƒê·ªß ƒë·ªÉ ƒë·∫øm
              },
            ],
            attributes: ["id", "category_name", "image"],
          },
          {
            model: Product,
            as: "products",
            attributes: ["id"],
          },
        ],
      });
    } catch (error) {
      throw error;
    }
  }

  // üîπ GET CATEGORY BY ID (k√®m danh m·ª•c con)
  static async getById(id) {
    try {
      return await Category.findByPk(id, {
        include: [
          {
            model: Category,
            as: "subcategories",
            attributes: ["id", "category_name", "image"],
          },
        ],
      });
    } catch (error) {
      throw error;
    }
  }

  // üîπ CREATE CATEGORY
  static async create(category) {
    try {
      return await Category.create(category);
    } catch (error) {
      throw error;
    }
  }

  // üîπ UPDATE CATEGORY
  static async update(id, updateCategory) {
    try {
      const categoryToUpdate = await Category.findByPk(id);
      if (categoryToUpdate) {
        await categoryToUpdate.update(updateCategory);
        return categoryToUpdate;
      }
      return null;
    } catch (error) {
      throw error;
    }
  }

  // üîπ DELETE CATEGORY (ki·ªÉm tra danh m·ª•c con tr∆∞·ªõc khi x√≥a)
  static async delete(id) {
    try {
      const categoryToDelete = await Category.findByPk(id, {
        include: [
          { model: Category, as: "subcategories" },
          { model: Product, as: "products" }, // Ki·ªÉm tra s·∫£n ph·∫©m thu·ªôc danh m·ª•c
        ],
      });

      if (!categoryToDelete) return null;

      // N·∫øu c√≥ danh m·ª•c con, kh√¥ng cho x√≥a
      if (categoryToDelete.subcategories.length > 0) {
        throw new Error("Kh√¥ng th·ªÉ x√≥a danh m·ª•c c√≥ danh m·ª•c con");
      }

      // N·∫øu c√≥ s·∫£n ph·∫©m thu·ªôc danh m·ª•c, kh√¥ng cho x√≥a
      if (categoryToDelete.products.length > 0) {
        throw new Error("Kh√¥ng th·ªÉ x√≥a danh m·ª•c c√≥ s·∫£n ph·∫©m");
      }

      await categoryToDelete.destroy();
      return categoryToDelete;
    } catch (error) {
      throw error;
    }
  }
}

module.exports = CategoryService;
