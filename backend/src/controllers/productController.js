const ProductService = require("../services/productService");
const ProductSizeService = require("../services/productSizeService");
const CategoryService = require("../services/CategoryService");
const { Product, Category } = require("../models");

async function getAllCategoryIds(parentId) {
  const categories = await Category.findAll({
    where: { parent_id: parentId },
  });

  const childIds = await Promise.all(
    categories.map((cat) => getAllCategoryIds(cat.id))
  );

  return [parentId, ...childIds.flat()];
}

class ProductController {
  //  T·∫°o s·∫£n ph·∫©m
  static async create(req, res) {
    try {
      const { sku, name, description, category_id, price, sizes } = JSON.parse(
        req.body.product_data
      );
      console.log("üì© D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);
      console.log("üìÇ File upload:", req.files);

      //  Ki·ªÉm tra SKU c√≥ t·ªìn t·∫°i kh√¥ng
      const existingProduct = await ProductService.getBySKU(sku);
      if (existingProduct) {
        return res
          .status(400)
          .json({ message: "SKU ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn SKU kh√°c" });
      }

      //  Ki·ªÉm tra category_id c√≥ t·ªìn t·∫°i kh√¥ng
      const categoryExists = await CategoryService.getById(category_id);
      if (!categoryExists) {
        return res.status(400).json({ message: "Category ID kh√¥ng t·ªìn t·∫°i" });
      }

      //  X·ª≠ l√Ω ·∫£nh ch√≠nh
      let mainImagePath = null;
      if (req.files["main_image"] && req.files["main_image"][0]) {
        mainImagePath = `/uploads/products/${req.files["main_image"][0].filename}`;
      }

      //  X·ª≠ l√Ω ·∫£nh ph·ª•
      let subImages = [];
      if (req.files["sub_images"]) {
        subImages = req.files["sub_images"].map(
          (file) => `/uploads/products/${file.filename}`
        );
      }

      const productData = {
        sku,
        name,
        description,
        category_id,
        price,
        main_image: mainImagePath,
      };

      //  T·∫°o s·∫£n ph·∫©m tr∆∞·ªõc
      const createdProduct = await ProductService.create(
        productData,
        subImages
      );

      //  N·∫øu c√≥ size, l∆∞u v√†o b·∫£ng `product_sizes`
      if (sizes && sizes.length > 0) {
        const sizesData = sizes.map((size) => ({
          product_id: createdProduct.id,
          size: size.size,
          quantity: size.quantity,
        }));

        await ProductSizeService.bulkCreate(sizesData);
      }

      return res.status(201).json(createdProduct);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:", error);

      if (error.name === "SequelizeValidationError") {
        return res
          .status(400)
          .json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", errors: error.errors });
      }

      if (error.name === "SequelizeForeignKeyConstraintError") {
        return res.status(400).json({ message: "Category ID kh√¥ng h·ª£p l·ªá" });
      }

      return res
        .status(500)
        .json({ message: "L·ªói server", error: error.message });
    }
  }

  //  L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi ph√¢n trang
  static async getAll(req, res) {
    try {
      const {
        search,
        category_id,
        price_range,
        sort,
        page = 1,
        limit = 10,
      } = req.query;

      const data = await ProductService.getAllWithPagination({
        search,
        category_id,
        price_range,
        sort,
        page,
        limit,
      });

      return res.status(200).json(data);
    } catch (error) {
      return res.status(500).json({ message: error.message });
    }
  }

  static async getProductsByCategory(req, res) {
    try {
      const { categoryId } = req.params;

      // 1. Ki·ªÉm tra danh m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
      const category = await Category.findByPk(categoryId);
      if (!category) {
        return res.status(404).json({ message: "Category not found" });
      }

      // 2. ƒê·ªá quy l·∫•y t·∫•t c·∫£ id con
      const categoryIds = await getAllCategoryIds(categoryId);

      // 3. L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ category_id n·∫±m trong list ƒë√≥
      const products = await Product.findAll({
        where: {
          category_id: categoryIds,
        },
        include: ["categoryData", "images", "sizes"], // n·∫øu mu·ªën
      });

      return res.json(products);
    } catch (error) {
      console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c:", error);
      return res.status(500).json({ message: "Server error" });
    }
  }

  //  L·∫•y s·∫£n ph·∫©m theo ID
  static async getById(req, res) {
    const { id } = req.params;
    try {
      const product = await ProductService.getById(id);
      if (product) {
        return res.status(200).json(product);
      }
      return res.status(404).json({ message: "Product not found" });
    } catch (error) {
      return res.status(500).json({ message: error.message });
    }
  }

  //  C·∫≠p nh·∫≠t s·∫£n ph·∫©m
  static async update(req, res) {
    try {
      const { id } = req.params;
      const { product_data, removed_images } = req.body;

      // Parse product_data t·ª´ frontend
      const updateData = JSON.parse(product_data);
      const removedImages = JSON.parse(removed_images || "[]"); // Danh s√°ch ·∫£nh ph·ª• c·∫ßn x√≥a

      // ·∫¢nh ch√≠nh (ch·ªâ c√≥ 1 file)
      const mainImage = req.files["main_image"]
        ? req.files["main_image"][0]
        : null;

      // ·∫¢nh ph·ª• (c√≥ th·ªÉ c√≥ nhi·ªÅu)
      const subImages = req.files["sub_images"] || [];

      const updatedProduct = await ProductService.update(
        id,
        updateData,
        mainImage,
        subImages,
        removedImages
      );

      return res.status(200).json(updatedProduct);
    } catch (error) {
      console.error("Error updating product:", error);
      return res.status(500).json({ message: error.message });
    }
  }

  //  X√≥a s·∫£n ph·∫©m
  static async delete(req, res) {
    try {
      const { id } = req.params;
      const result = await ProductService.delete(id);

      if (!result.success) {
        return res.status(400).json(result); // Tr·∫£ v·ªÅ l·ªói 400 khi kh√¥ng th·ªÉ x√≥a
      }

      res.status(200).json(result); // Tr·∫£ v·ªÅ th√†nh c√¥ng
    } catch (error) {
      res
        .status(500)
        .json({ success: false, message: "L·ªói server khi x√≥a s·∫£n ph·∫©m!" });
    }
  }
}

module.exports = ProductController;
